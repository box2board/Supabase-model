generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Reference tables
model Team {
  id      String  @id @db.VarChar(8)
  name    String
  conf    String?
  div     String?
  tz      String?
  isDome  Boolean? @default(false)
  gamesAsHome Game[] @relation("home")
  gamesAsAway Game[] @relation("away")
}

model Stadium {
  teamId String @id
  name   String
  city   String?
  state  String?
  lat    Float?
  lon    Float?
  isDome Boolean? @default(false)
  tz     String?
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Book {
  key       String @id
  display   String
  enabled   Boolean @default(true)
  snapshots OddsSnapshot[]
}

// Core schedule/results table
model Game {
  id         String @id
  season     Int
  week       Int
  kickoffUtc DateTime
  homeId     String
  awayId     String
  status     String?  @default("STATUS_SCHEDULED")
  homeScore  Int?
  awayScore  Int?
  home       Team    @relation("home", fields: [homeId], references: [id])
  away       Team    @relation("away", fields: [awayId], references: [id])
  odds       OddsSnapshot[]
  outputs    ModelOutput[]
  data       GamesData?
  lines      LineMovement[]
}

// Odds snapshots (historical lines)
model OddsSnapshot {
  id        String   @id @default(cuid())
  takenUtc  DateTime
  gameId    String
  bookKey   String
  homeML    Int?
  awayML    Int?
  spreadHome Float?
  total      Float?
  source     String?
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  book      Book    @relation(fields: [bookKey], references: [key], onDelete: Restrict)
}

// Model runs table
model ModelRun {
  id         String   @id @default(cuid())
  season     Int
  week       Int
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  notes      String?
  outputs    ModelOutput[]
}

// Model outputs per game
model ModelOutput {
  id             String   @id @default(cuid())
  runId          String
  gameId         String
  projSpreadHome Float
  projTotal      Float
  mktSpreadHome  Float?
  mktTotal       Float?
  confidence0100 Int?
  tier           String?
  run            ModelRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  game           Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// Extended data for each game (EPA/DVOA, weather, injuries, rest/travel etc.)
model GamesData {
  gameId       String  @id
  season       Int
  week         Int
  kickoffUtc   DateTime
  homeId       String
  awayId       String
  spreadOpen   Float?
  totalOpen    Float?
  homeEpaOff   Float?
  awayEpaOff   Float?
  homeEpaDef   Float?
  awayEpaDef   Float?
  homeDvoaOff  Float?
  awayDvoaOff  Float?
  homeDvoaDef  Float?
  awayDvoaDef  Float?
  homeRest     Int?
  awayRest     Int?
  homeTravelMi Float?
  awayTravelMi Float?
  tempF        Float?
  windMph      Float?
  precipProb   Float?
  isDome       Boolean?
  injuredHome  Int?
  injuredAway  Int?
  game         Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

// Line movement history by book
model LineMovement {
  id         String  @id @default(cuid())
  gameId     String
  takenUtc   DateTime
  bookKey    String
  spreadOpen Float?
  spreadClose Float?
  totalOpen  Float?
  totalClose Float?
  moveDir    String?
  hitRate    Float?
  game       Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  book       Book    @relation(fields: [bookKey], references: [key], onDelete: Restrict)
}

// Operations/job history
model OpsJob {
  id         String   @id @default(cuid())
  name       String
  scheduledAt DateTime?
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  status     String?  // e.g. 'success', 'error'
  message    String?
}

// Curated outputs for easy front-end consumption
model CuratedOutput {
  id             String   @id @default(cuid())
  runId          String
  gameId         String
  homeTeam       String
  awayTeam       String
  kickoffUtc     DateTime
  projSpreadHome Float
  projTotal      Float
  mktSpreadHome  Float?
  mktTotal       Float?
  confidence0100 Int?
  tier           String?
  run            ModelRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  game           Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
